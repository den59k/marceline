datasource postgresql {
  url      = env("PG_DATABASE_URL")
  provider = "postgresql"
}

generator client {
  provider        = "prisma-client-js"
}

model AdminUser {
  id                Int                 @id @default(autoincrement())
  createdAt         DateTime            @default(now())
  login             String              @unique
  password          Bytes
  token             String?             @unique
}

enum UserType {
  creator
  designer
  reader
  manager
}

model User {
  id                Int                 @id @default(autoincrement())
  createdAt         DateTime            @default(now())
  email             String              @unique
  password          Bytes
  type              UserType            @default(reader)
  avatarId          String?
  fileIds           String[]            @default([])
  chats             UserChat[]
  additionalInfo    UserAdditionalInfo?
  location          String?
  features          String[]            @default([])
  telegramIds       Int[]               @default([])
  deleted           Boolean             @default(false)
  licenseFileId     String?             
}


model UserAdditionalInfo {
  id                Int                 @id @default(autoincrement())
  createdAt         DateTime            @default(now())
  userId            Int                 @unique
  user              User                @relation(fields: [userId], references: [id])
}

model Chat {
  id                BigInt              @id @default(autoincrement())
  createdAt         DateTime            @default(now())
  name              String?
  users             UserChat[]
  features          ChatFeature[]
}

model Request {
  id                BigInt              @id @default(autoincrement())
  createdAt         DateTime            @default(now())
  fields            Json?
}

model ChatFeature {
  id                BigInt                @id @default(autoincrement())
  name              String?
  chatId            BigInt
  chat              Chat                  @relation(fields: [chatId], references: [id], onDelete: Cascade)
}

enum UserChatRole {
  admin
  default
}

model UserChat {
  userId            Int
  user              User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  chatId            BigInt
  chat              Chat               @relation(fields: [chatId], references: [id], onDelete: Cascade)
  role              UserChatRole       @default(default)
  @@id([ userId, chatId ])
}

model UserRegistrationRequest {
  id                String              @id @default(uuid())
  createdAt         DateTime            @default(now())
  data              Json
}

enum ArticleType {
  docs
  news
}

model Article {
  id                Int                 @id @default(autoincrement())
  type              ArticleType         
  name              String
  content           Json
  createdAt         DateTime            @default(now())
}

model File {
  id                String              @id @default(uuid())
  createdAt         DateTime            @default(now())
  src               String
  type              String?
  previewSrc        String?
  size              Int
  name              String?
}